/**
 * Copyright (c) 2012, Csirmaz DÃ¡vid
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef ERROR_H
#define ERROR_H

/**
 * An enum of error codes
 */
enum ERR_ErrorCode
{
    E_OK = 0,
    E_FILE_NOT_FOUND,
    E_LEX_INVALID_CHARACTER,
    E_LEX_IMPOSSIBLE_ERROR,
    E_LEX_INVALID_BUILT_IN_TYPE_LETTER,
    E_LEX_INVALID_OPERATOR,
    E_LEX_MISSING_EXPONENTIAL_PART,
    E_LEX_HEXA_FLOATING_POINT_NOT_ALLOWED,
    E_LEX_QUOTE_EXPECTED,
    E_LEX_INVALID_HEXA_LITERAL,
    E_LEX_INVALID_DECIMAL_NUMBER,

    E_STX_MODULE_EXPECTED,
    E_STX_MODULE_TYPE_EXPECTED,
    E_STX_SEMICOLON_EXPECTED,
    E_STX_MAIN_EXPECTED,
    E_STX_TYPE_EXPECTED,
    E_STX_VARDECL_EXPECTED,
    E_STX_IDENTIFIER_EXPECTED,
    E_STX_OF_EXPECTED,
    E_STX_LEFT_BRACKET_EXPECTED,
    E_STX_INTEGER_NUMBER_EXPECTED,
    E_STX_RIGHT_BRACKET_EXPECTED,
    E_STX_TO_EXPECTED,
    E_STX_PARAMETER_DIRECTION_EXPECTED,
    E_STX_LEFT_PARENTHESIS_EXPECTED,
    E_STX_RIGHT_PARENTHESIS_EXPECTED,
    E_STX_COMMA_EXPECTED,
    E_STX_FUNCTION_EXPECTED,
    E_STX_LEFT_BRACE_EXPECTED,
    E_STX_RIGHT_BRACE_EXPECTED,
    E_STX_RETURN_EXPECTED,
    E_STX_TERM_EXPECTED,
    E_STX_IF_EXPECTED,
    E_STX_UNKNOWN_STATEMENT,
    E_STX_LOOP_EXPECTED,
    E_STX_ASSIGNMENT_OR_EXPRESSION_STATEMENT_EXPECTED,
    E_STX_UNEXPECTED_END_OF_FILE,
    E_STX_NAMESPACE_EXPECTED,
    E_STX_USING_EXPECTED,
    E_STX_PERIOD_EXPECTED,
    E_STX_STRUCT_EXPECTED,
    E_STX_FUNCPTR_EXPECTED,
    E_STX_CASE_EXPECTED,
    E_STX_COLON_EXPECTED,
    E_STX_BREAK_OR_CONTINUE_EXPECTED,
    E_STX_SWITCH_EXPECTED,
    E_STX_CASE_OR_DEFAULT_EXPECTED,
    E_STX_DECLARATION_EXPECTED,
    E_STX_PRECEDENCE_TYPE_EXPECTED,
    E_STX_STRING_EXPECTED,
    E_STX_BLOCK_OR_EXTERNAL_EXPECTED,
    E_STX_PLATFORM_EXPECTED,
    E_STX_BLOCK_OR_IF_STATEMENT_EXPECTED,
    E_STX_CORRUPT_TOKEN,

    E_SMC_CORRUPT_SYNTAX_TREE,
    E_SMC_REDEFINITION_OF_SYMBOL,
    E_SMC_TOO_FEW_PARAMETERS,
    E_SMC_TOO_MANY_PARAMETERS,
    E_SMC_EMPTY_PLATFORM_BLOCK,
    E_SMC_BREAK_IS_NOT_IN_LOOP_OR_CASE_BLOCK,
    E_SMC_CONTINUE_IS_NOT_IN_LOOP_OR_CASE_BLOCK,
    E_SMC_UNDEFINED_SYMBOL,
    E_SMC_NOT_AN_OPERATOR,
    E_SMC_NOT_A_NAMESPACE,
    E_SMC_AMBIGUOS_NAME,
};

/**
 * Raises an error.
 *
 * @param errorCode the error code to raise.
 */
void ERR_raiseError(enum ERR_ErrorCode errorCode);
/**
 * Catches an error and clears it.
 *
 * @param errorCode The error to catch.
 *
 * @return Nonzero if the error was previously raised, zero otherwise.
 */
int ERR_catchError(enum ERR_ErrorCode errorCode);
/**
 * Returns nonzero if there was an error.
 */
int ERR_isError();
/**
 * Clears all errors previously raised.
 */
void ERR_clearErrors();

#endif // ERROR_H
